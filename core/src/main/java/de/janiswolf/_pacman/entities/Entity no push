package de.janiswolf._pacman.entities;

import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import de.janiswolf._pacman.GridWorld;

public abstract class Entity {
    protected Sprite sprite;
    protected Vector2 position;
    protected Vector2 velocity;
    protected float speed;
    protected int health;
    protected float startX, startY, prevX, prevY;
    protected GridWorld gridWorld;

    public Entity(Texture texture, float startX, float startY, float speed, int health, GridWorld gridWorld) {
        this.sprite = new Sprite(texture);
        this.position = new Vector2(startX, startY);
        this.velocity = new Vector2(0, 0);
        this.speed = speed;
        this.sprite.setPosition(startX, startY);
        this.sprite.setSize(1, 1);
        this.health = health;
        this.startX = startX;
        this.startY = startY;
        this.prevX = startX;
        this.prevY = startY;
        this.gridWorld = gridWorld;
    }

    public abstract void update(float deltaTime);

    public Sprite getSprite() {
        return sprite;
    }

    public Vector2 getPosition() {
        return position;
    }

    public Rectangle getBoundingRectangle() {
        return sprite.getBoundingRectangle();
    }

    public float getStartX() {
        return startX;
    }

    public float getStartY() {
        return startY;
    }

    public void setPosition(Vector2 position) {
        this.position = position;
    }

    /**
     * Überprüft auf Kollision und behandelt Pushback robust, um Glitches zu verhindern.
     */
    boolean checkCollision() {
        boolean collisionDetected = false;

        // Speichere die ursprüngliche Position
        Vector2 originalPosition = position.cpy();

        for (Sprite walls : gridWorld.getWallSprites()) {
            Rectangle wallRect = new Rectangle(walls.getX(), walls.getY(), walls.getWidth() - 0.2f, walls.getHeight() - 0.2f);
            Rectangle entityRect = new Rectangle(position.x, position.y, sprite.getWidth(), sprite.getHeight());

            if (entityRect.overlaps(wallRect)) {
                collisionDetected = true;

                // Separat Kollision entlang der X-Achse behandeln
                position.x = prevX; // Zurücksetzen X
                entityRect.setPosition(position.x, position.y);
                if (entityRect.overlaps(wallRect)) {
                    if (position.x > wallRect.x) {
                        position.x += 0.1f; // Pushback nach rechts
                    } else {
                        position.x -= 0.1f; // Pushback nach links
                    }
                }

                // Separat Kollision entlang der Y-Achse behandeln
                position.y = prevY; // Zurücksetzen Y
                entityRect.setPosition(position.x, position.y);
                if (entityRect.overlaps(wallRect)) {
                    if (position.y > wallRect.y) {
                        position.y += 0.1f; // Pushback nach oben
                    } else {
                        position.y -= 0.1f; // Pushback nach unten
                    }
                }

                sprite.setPosition(position.x, position.y);
            }
        }

        if (!collisionDetected) {
            // Position ist sicher, setze prevX und prevY
            prevX = position.x;
            prevY = position.y;
        } else {
            // Wenn keine Kollision erkannt wurde, zur originalen Position zurücksetzen
            position.set(originalPosition);
        }

        return !collisionDetected;
    }
}
